
// Set this to true for production
var doCache = true;

// Name our cache
var CACHE = 'notification-experiment';

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  console.log("activate event: ",event)
  const cacheWhitelist = [CACHE];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise.all(keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log('Deleting cache: ' + key)
            return caches.delete(key);
          }
        }))
      )
  );
});


// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
  console.log("install:", event)
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE)
        .then(function(cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(response => {
              console.log("response",response, typeof response)
              return response.json()
            })
            .then(assets => {
              console.log('assets', assets)
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                "/",
                assets["main.js"]
              ]
              cache.addAll(urlsToCache)
              console.log('cached');
            }).catch(function(error) {
              console.log("error caught here", error)
            });
        })
    );
  }
});


self.addEventListener('fetch', function(evt) {
  console.log('The service worker is serving the asset.')
   evt.respondWith(fromCache(evt.request));
   evt.waitUntil(update(evt.request));
});

function fromCache(request) {
  return caches.open(CACHE).then(function (cache) {
    return cache.match(request).then(function (matching) {
      return matching || Promise.reject('no-match');
    });
  });
}

function update(request) {
  return caches.open(CACHE).then(function (cache) {
    return fetch(request).then(function (response) {
      return cache.put(request, response);
    });
  });
}
